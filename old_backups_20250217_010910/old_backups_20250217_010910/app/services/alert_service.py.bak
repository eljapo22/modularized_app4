"""
Alert and email services for the Transformer Loading Analysis Application
"""

import streamlit as st
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import base64
from ..config.constants import SCOPES

def get_gmail_service():
    """Initialize Gmail API service"""
    try:
        flow = InstalledAppFlow.from_client_secrets_file(
            'credentials.json', SCOPES)
        creds = flow.run_local_server(port=0)
        service = build('gmail', 'v1', credentials=creds)
        return service
    except Exception as e:
        st.error(f"Error initializing Gmail service: {str(e)}")
        return None

def get_status_color(status):
    """Get color for status"""
    colors = {
        'Critical': '#ff0000',
        'Overloaded': '#ffa500',
        'Warning': '#ffff00',
        'Pre-Warning': '#90EE90',
        'Normal': '#00ff00'
    }
    return colors.get(status, '#000000')

def create_alert_email_content(alert_data, date, hour, dashboard_link):
    """Create HTML content for alert email"""
    html_content = f"""
    <html>
    <head>
        <style>
            .status {{
                padding: 5px;
                border-radius: 3px;
                color: white;
            }}
            table {{
                border-collapse: collapse;
                width: 100%;
            }}
            th, td {{
                border: 1px solid #ddd;
                padding: 8px;
                text-align: left;
            }}
            th {{
                background-color: #f2f2f2;
            }}
        </style>
    </head>
    <body>
        <h2>Transformer Loading Alert</h2>
        <p>Date: {date}</p>
        <p>Hour: {hour:02d}:00</p>
        <table>
            <tr>
                <th>Transformer ID</th>
                <th>Loading Status</th>
                <th>Loading Percentage</th>
                <th>Power (kW)</th>
                <th>Size (kVA)</th>
            </tr>
    """
    
    for _, row in alert_data.iterrows():
        status_color = get_status_color(row['load_range'])
        html_content += f"""
            <tr>
                <td>{row['transformer_id']}</td>
                <td><span class="status" style="background-color: {status_color}">{row['load_range']}</span></td>
                <td>{row['loading_percentage']:.1f}%</td>
                <td>{row['power_kw']:.1f}</td>
                <td>{row['size_kva']}</td>
            </tr>
        """
    
    html_content += f"""
        </table>
        <p>View detailed analysis: <a href="{dashboard_link}">Dashboard Link</a></p>
    </body>
    </html>
    """
    
    return html_content

def send_alert_email(alert_data, date, hour, recipients):
    """Send alert email with dashboard link"""
    try:
        service = get_gmail_service()
        if not service:
            return False
            
        message = MIMEMultipart()
        message['to'] = recipients
        message['subject'] = f'Transformer Loading Alert - {date} {hour:02d}:00'
        
        dashboard_link = generate_dashboard_link(
            alert_data.iloc[0]['transformer_id'],
            extract_feeder(alert_data.iloc[0]['transformer_id']),
            date,
            hour
        )
        
        html_content = create_alert_email_content(alert_data, date, hour, dashboard_link)
        message.attach(MIMEText(html_content, 'html'))
        
        raw_message = base64.urlsafe_b64encode(message.as_bytes()).decode('utf-8')
        service.users().messages().send(userId='me', body={'raw': raw_message}).execute()
        
        return True
        
    except Exception as e:
        st.error(f"Error sending alert email: {str(e)}")
        return False

def process_alerts(results_df, selected_date, selected_hour, recipients=None):
    """Process alerts and send emails if conditions are met"""
    try:
        alert_data = check_alert_condition(results_df, selected_hour)
        if alert_data is not None and not alert_data.empty:
            if recipients:
                if send_alert_email(alert_data, selected_date, selected_hour, recipients):
                    st.success("Alert email sent successfully!")
                else:
                    st.error("Failed to send alert email")
            return alert_data
        return None
    except Exception as e:
        st.error(f"Error processing alerts: {str(e)}")
        return None
